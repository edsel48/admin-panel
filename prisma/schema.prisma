// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Store {
  id          String @id @default(uuid())
  name        String
  userId      String
  billboards  Billboard[] @relation("StoreToBillboard")
  categories  Category[] @relation("StoreToCategory")
  products    Product[] @relation("StoreToProduct")
  sizes       Size[] @relation("StoreToSize")
  promos      Promo[] @relation("StoreToPromo")
  orders      Order[] @relation("StoreToOrder")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Billboard {
  id        String @id @default(uuid())
  storeId   String
  store     Store @relation("StoreToBillboard", fields: [storeId], references: [id])
  categories  Category[]
  label     String
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Category {
  id          String  @id @default(uuid())
  storeId     String
  store       Store   @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  products    Product[] @relation("CategoryToProduct")
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToSize", fields: [storeId], references: [id])
  name  String
  value String
  products Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Product {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String
  category Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  promo Promo?
  name String
  price Decimal
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  sizeId String
  size Size @relation(fields: [sizeId], references: [id])
  images Image[]
  orderItems OrderItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
}


model Promo {
  id String @id @default(uuid())
  name String
  productId String @unique
  product Product @relation(fields: [productId], references: [id])
  storeId String
  store Store @relation("StoreToPromo", fields: [storeId], references: [id])
  discount Decimal
  isArchived Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}



model Image {
  id String @id @default(uuid())
  productId String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid Boolean @default(false)
  phone String @default("")
  address String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model OrderItem {
  id String @id @default(uuid())
  orderId String
  order Order @relation(fields: [orderId], references: [id])
  productId String
  product Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}