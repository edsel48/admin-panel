generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Store {
  id         String      @id @default(uuid())
  name       String
  userId     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  orders     Order[]     @relation("StoreToOrder")
  products   Product[]   @relation("StoreToProduct")
  promos     Promo[]     @relation("StoreToPromo")
  sizes      Size[]      @relation("StoreToSize")
  suppliers  Supplier[]  @relation("StoreToSupplier")
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  label      String
  imageUrl   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  categories Category[]

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  storeId     String
  billboardId String
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  products    Product[] @relation("CategoryToProduct")

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  SizesOnProduct[]
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])

  @@index([storeId])
}

model Supplier {
  id        String    @id @default(uuid())
  name      String
  storeId   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   Product[]
  store     Store     @relation("StoreToSupplier", fields: [storeId], references: [id])
}

model Product {
  id         String      @id @default(uuid())
  storeId    String
  categoryId String
  name       String
  price      Decimal
  isFeatured Boolean     @default(false)
  isArchived Boolean     @default(false)
  sizeId     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  supplierId String?
  images     Image[]
  orderItems OrderItem[]
  category   Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  sizes SizesOnProduct[]
  store      Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  supplier   Supplier?   @relation(fields: [supplierId], references: [id])
  promo      Promo?

  @@index([storeId])
  @@index([supplierId])
  @@index([categoryId])
  @@index([sizeId])
}

model SizesOnProduct{
  product Product @relation(fields: [productId], references: [id])
  productId String
  size Size @relation(fields: [sizeId], references: [id])
  sizeId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([productId, sizeId])

}

model Promo {
  id                    String   @id @default(uuid())
  productId             String   @unique
  discount              Decimal
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  storeId               String
  name                  String
  isArchived            Boolean  @default(false)
  maximumDiscountAmount Decimal?
  minimumAmountBought   Decimal?
  validUntil            DateTime @default(now())
  maximalUseCount       Decimal?
  useCount              Decimal?
  product               Product  @relation(fields: [productId], references: [id])
  store                 Store    @relation("StoreToPromo", fields: [storeId], references: [id])

  @@index([productId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Order {
  id         String      @id @default(uuid())
  storeId    String
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  total      BigInt      @default(0)
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]

  @@index([storeId])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int     @default(0)
  subtotal  BigInt  @default(0)
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
